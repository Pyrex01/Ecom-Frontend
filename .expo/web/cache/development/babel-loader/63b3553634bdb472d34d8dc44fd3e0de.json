{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\PyRex\\\\Desktop\\\\TY project\\\\frontend\\\\APP\\\\Components\\\\Forms\\\\Modal.jsx\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport React, { useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Touchable from \"react-native-web/dist/exports/Touchable\";\nimport Modal from \"react-native-modal\";\nimport Colors from \"../../Configs/Colors/Colors\";\n\nfunction ModalTester(porps) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      otp = _useState2[0],\n      setOtp = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      otpwarning = _useState4[0],\n      Setotpwarning = _useState4[1];\n\n  var user_Data = {\n    otp: otp\n  };\n  var log_Setters = {\n    Setotpwarning: Setotpwarning\n  };\n\n  var toggleModal = function toggleModal() {\n    setModalVisible(!isModalVisible);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, React.createElement(Modal, {\n    isVisible: true,\n    style: styles.container,\n    backdropColor: \"black\",\n    backdropOpacity: \"0.90\",\n    deviceHeight: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }\n  }, React.createElement(TextInput, {\n    onChangeText: function onChangeText(text) {\n      return setOtp(text);\n    },\n    placeholder: \"Enter the OTP\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  }), React.createElement(Text, {\n    style: {\n      color: Colors.danger\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, otpwarning), React.createElement(Touchable, {\n    title: \"Submit\",\n    onPress: function onPress() {\n      return otpSubmit(otp, Setotpwarning);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }))));\n}\n\nfunction otpSubmit(otp, setotpwarning) {\n  if (isNaN(otp)) {\n    setotpwarning(\"please enter valid number\");\n    return;\n  }\n\n  AsyncStorage.getItem(\"signup_token\", function (err, result) {\n    mainBackend.post(\"/user/confirm/\", {\n      token: result,\n      otp: otp\n    }).then(function (response) {\n      switch (response.status) {\n        case 202:\n          alert(\"signup success\");\n          Alert.alert(\"signup success\");\n          AsyncStorage.clear();\n          break;\n\n        case 410:\n          alert(\"otp time expired try again\");\n          Alert.alert(\"otp time expired try again\");\n\n        case 400:\n          alert(\"oops something went wrong!\");\n          Alert.alert(\"oops something went wrong!\");\n      }\n    });\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    marginTop: 150\n  },\n  bigBlue: {\n    color: 'blue',\n    fontWeight: 'bold',\n    fontSize: 30\n  },\n  red: {\n    color: 'red'\n  }\n});\nexport default ModalTester;","map":{"version":3,"sources":["C:/Users/PyRex/Desktop/TY project/frontend/APP/Components/Forms/Modal.jsx"],"names":["AsyncStorage","React","useState","Modal","Colors","ModalTester","porps","otp","setOtp","otpwarning","Setotpwarning","user_Data","log_Setters","toggleModal","setModalVisible","isModalVisible","styles","container","flex","text","color","danger","otpSubmit","setotpwarning","isNaN","getItem","err","result","mainBackend","post","token","then","response","status","alert","Alert","clear","StyleSheet","create","marginTop","bigBlue","fontWeight","fontSize","red"],"mappings":"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","sourcesContent":["import AsyncStorage from \"@react-native-community/async-storage\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Text, View, TextInput, StyleSheet,Touchable } from \"react-native\";\r\nimport Modal from \"react-native-modal\";\r\n\r\nimport Colors from \"../../Configs/Colors/Colors\";\r\n\r\nfunction ModalTester(porps) {\r\n    \r\n\r\n    let [otp, setOtp] = useState(\"\");\r\n\tlet [otpwarning, Setotpwarning] = useState(\"\");\r\n\r\n\tlet user_Data = { otp };\r\n\tlet log_Setters = { Setotpwarning };\r\n\r\n    const toggleModal = () => {\r\n    setModalVisible(!isModalVisible);\r\n    };\r\n\r\n    return (\r\n    <View style={styles.container}>\r\n            <Modal isVisible={true} style={styles.container } backdropColor =\"black\" backdropOpacity = \"0.90\" deviceHeight=\"1\" >\r\n                <View style={{ flex: 1 }}>\r\n                    <TextInput onChangeText={text => setOtp(text)} placeholder='Enter the OTP' />\r\n\t\t\t\t    <Text style={{ color: Colors.danger   }}>{otpwarning}</Text>\r\n                    <Touchable title=\"Submit\" onPress={() => otpSubmit(otp, Setotpwarning)} />\r\n                </View>\r\n            </Modal>\r\n        </View>\r\n    );\r\n}\r\n\r\nfunction otpSubmit(otp, setotpwarning) {\r\n\tif (isNaN(otp)) {\r\n\t\tsetotpwarning(\"please enter valid number\");\r\n\t\treturn;\r\n\t}\r\n\tAsyncStorage.getItem(\"signup_token\", (err, result) => {\r\n\t\tmainBackend\r\n\t\t\t.post(\"/user/confirm/\", { token: result, otp: otp })\r\n\t\t\t.then(function (response) {\r\n\t\t\t\tswitch (response.status) {\r\n\t\t\t\t\tcase 202:\r\n\t\t\t\t\t\talert(\"signup success\");\r\n\t\t\t\t\t\tAlert.alert(\"signup success\");\r\n\t\t\t\t\t\tAsyncStorage.clear()\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 410:\r\n\t\t\t\t\t\talert(\"otp time expired try again\");\r\n\t\t\t\t\t\tAlert.alert(\"otp time expired try again\");\r\n\t\t\t\t\tcase 400:\r\n\t\t\t\t\t\talert(\"oops something went wrong!\");\r\n\t\t\t\t\t\tAlert.alert(\"oops something went wrong!\");\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t});\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n    marginTop: 150,\r\n    },\r\n    bigBlue: {\r\n    color: 'blue',\r\n    fontWeight: 'bold',\r\n    fontSize: 30,\r\n    },\r\n    red: {\r\n    color: 'red',\r\n    },\r\n    \r\n});\r\nexport default ModalTester;"]},"metadata":{},"sourceType":"module"}